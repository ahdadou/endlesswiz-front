export interface LoginState {
  crossDeviceTracking?: string;
  customerNumber?: string;
  customerId?: string;
  email?: string;
  emailHash?: string;
  firstName?: string;
  lastName?: string;
  state: ELoginState;
  sessionId?: string;
}

export enum ELoginState {
  LOGGED_IN = "LOGGED_IN",
  NOT_LOGGED_IN = "NOT_LOGGED_IN",
  ANONYMOUS_USER = "ANONYMOUS_USER",
}

export interface TranscriptResponse {
  transcriptId: string;
  paragraph: string;
  startTime: number;
  endTime: number;
}

export interface GetWordResponse {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  videosDetailResponse: VideosDetailResponse[];
}

export interface VideosDetailResponse {
  videoId: string;
  vid: string;
  transcriptResponse: TranscriptResponse;
  duration: number;
  isFavorite: boolean;
}

export interface RegisterRequest {
  firstname: string;
  lastname: string;
  email: string;
  password: string;
}

export interface ChangePasswordRequest {
  currentPassword: string;
  newPassword: string;
  confirmationPassword: string;
}
export interface UpdateUserRequest {
  firstname: string;
  bio: string;
}

export interface FavoriteVideoResponse {
  favoriteVideoId: string;
  vid: string;
}

export interface GetFavoriteVideoResponse {
  favoriteVideo: FavoriteVideoResponse[];
}

export interface FavoriteWordResponse {
  id: string;
  word: string;
  source: "VIDEO" | "MANUAL";
  example: string;
  description: string;
  createdAt: Date;
  mastered: boolean;
}

export interface DictionaryResponse {
  entries: Entry[];
}

export interface Entry {
  partOfSpeech: "noun" | "verb" | "adjective" | "adverb" | string; // Add other possible values
  language: "English" | "Spanish" | "Frensh" | string;
  definitions: Definition[];
}

export interface Definition {
  definition: string;
  examples: string[];
}

export interface GetFavoriteWordsResponse {
  favoriteWords: FavoriteWordResponse[];
}

export interface FavoriteWordRequest {
  id?: string;
  word: string;
  source: "VIDEO" | "MANUAL" | string;
  transcript_id?: string;
  description?: string;
  example?: string;
}

export interface ResetlinkRequest {
  email: string;
}

export interface ResetpasswordRequest {
  token: string;
  password: string;
  confirmPassword: string;
}
export interface PracticeSetRequest {
  id?: string;
  description?: string;
  title: string;
  words?: PracticeWordRequest[];
}

export interface PutPracticeSetDetailsRequest {
  description?: string;
  title: string;
  words?: PracticeWordRequest[];
}
export interface PracticeSetResponse {
  id?: string;
  description?: string;
  title: string;

  wordCount: number;
  createdAt: string;
  lastPracticed?: string;
  progress?: number;
  isFavorite?: boolean;
  tags?: string[];
}

export interface PracticeWordRequest {
  id?: string;
  word: string;
  example?: string;
  description?: string;
}

export interface GetPracticeSetDetailsResponse {
  id?: string;
  title: string;
  description: string;
  words: PracticeWordResponse[];
  createdAt: string;
  lastPracticed?: string;
  tags?: string[];
}

export interface PracticeWordResponse {
  id: string;
  word: string;
  example: string;
  description: string;
}

export interface DictionaryResponse {
  entries: Entry[];
}

export interface Entry {
  partOfSpeech: string;
  language: string;
  definitions: Definition[];
}

export interface Definition {
  definition: string;
  examples: string[];
}

export enum Languages {
  ENGLISH = "ENGLISH",
  SPANISH = "SPANISH",
  FRENCH = "FRENCH",
  GERMAN = "GERMAN",
  // Add other languages as needed
}

export enum TimeZone {
  UTC = "UTC",
  PST = "PST",
  EST = "EST",
  ET = "ET",
  CT = "CT",
  MT = "MT",
  PT = "PT",
  // Add other time zones as needed
}

// Main Interface
export interface UpdateUserSettingsRequest {
  id?: number; // Optional, as it might be auto-generated by the database
  isDarkMode?: boolean;
  isNotificationEnabled?: boolean;
  isAutoPlayEnabled?: boolean;
  isAutoTranslateEnabled?: boolean;
  isAutoTranscriptEnabled?: boolean;
  isAutoSummaryEnabled?: boolean;
  isAutoSearchEnabled?: boolean;
  isDailyReminderEnabled?: boolean;
  isWeeklyReminderEnabled?: boolean;
  newFeatureNotificationEnabled?: boolean;
  achievementNotificationEnabled?: boolean;
  marketingNotificationEnabled?: boolean;
  language: Languages;
  timeZone: TimeZone;
}

export interface LemonSqueezyCheckoutRequest {
  variantId: string;
  customerEmail: string;
}

export interface LemonSqueezyCheckoutResponse {
  id: string;
  checkoutUrl: string;
}

export interface SignInResponse {
  accessToken: string;
  refreshToken: string;
}

export interface UserStatisticsResponse {
  wordsLearn: Statistic;
  favoriteWords: Statistic;
  storiesRead: Statistic;
  dayStreak: number;

  monthlyProgress: MonthlyProgress[];
  weeklyProgress: WeeklyProgress[];
  setsCount?: number;
  practiceSet?: PracticeSetResponse;
}

export interface Statistic {
  total: number;
  thisWeek: number;
}
export interface MonthlyProgress {
  numberOfWords: number;
  month: Month;
}
export interface WeeklyProgress {
  numberOfWords: number;
  week: Week;
}

export enum Month {
  JANUARY = "JANUARY",
  FEBRUARY = "FEBRUARY",
  MARCH = "MARCH",
  APRIL = "APRIL",
  MAY = "MAY",
  JUNE = "JUNE",
  JULY = "JULY",
  AUGUST = "AUGUST",
  SEPTEMBER = "SEPTEMBER",
  OCTOBER = "OCTOBER",
  NOVEMBER = "NOVEMBER",
  DECEMBER = "DECEMBER",
}

export enum Week {
  MONDAY = "MONDAY",
  TUESDAY = "TUESDAY",
  WEDNSDAY = "WEDNSDAY", // Note: Typo in your code, should be "WEDNESDAY"
  THURSDAY = "THURSDAY",
  FRIDAY = "FRIDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
}

export interface UserTrackingDaysResponse {}


export interface GetPageableStories {
  stories: GetStories[]
  currentPage: number;
  totalPages: number;
  pageSize: number;
}
export interface GetStories {
  id: string,
  title: string,
  level: string,
  cover: string,
}

export interface GetStory {
  id: string,
  title: string,
  level: string,
  cover: string,
  audio: string,
  content: string,
}