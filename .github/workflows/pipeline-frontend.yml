name: Frontend CI/CD

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    name: Build and Test Frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Adjust to your Next.js project's Node.js version

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      # - name: Run tests (if applicable)
      #   run: npm test  # Optional: Include if you have tests configured

  build_image:
    name: Build and Push Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [build_and_test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .  # Assumes Dockerfile is in the root of the frontend project
          file: Dockerfile  # Path to your Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/endlesswiz_frontend:${{ steps.extract_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/endlesswiz_frontend:latest
          build-args: |
            NODE_ENV=production
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

  # deploy:
  #   name: Deploy Frontend
  #   runs-on: self-hosted  # Assumes the runner is on the target VPS
  #   needs: [build_image]
  #   steps:
  #     - name: Checkout code (if needed)
  #       uses: actions/checkout@v4

  #     - name: Deploy with Docker Compose
  #       run: |
  #         cd /home/user/infra  # Adjust to your infrastructure directory
  #         docker compose -f docker-compose-front.yml pull -q
  #         docker compose -f docker-compose-front.yml up -d